@inherits GridComponentBase<TItem>
@typeparam TItem

@if (EditState is not GridEditState.None)
{
    <CascadingValue Name="Row" Value="@(this)" IsFixed="true">
        <tr>
            @* ReSharper disable once ConvertIfStatementToSwitchStatement *@
            @if (Item is not null)
            {
                foreach (var context in EnumerateCells(Item))
                {
                    if (context is GridCellActionContext<TItem> { Actions: { } actions })
                    {
                        <GridCell TItem="TItem" Context="context">
                            @foreach (var action in actions.Where(x => x.EditState == EditState))
                            {
                                <DynamicComponent Type="action.GetType()" Parameters="@action.Parameters" />
                            }
                        </GridCell>
                    }
                    else if (context is GridCellDataContext<TItem> { OriginalValue: { } content })
                    {
                        <GridCell TItem="TItem" Context="context">
                            @content
                        </GridCell>
                    }
                    else
                    {
                        <GridCell TItem="TItem" Context="context">
                            &nbsp;
                        </GridCell>
                    }
                }
            }
            else
            {
                @ChildContent
            }
        </tr>
    </CascadingValue>
}

@code
{
    private IEnumerable<object?> EnumerateCells(TItem? item)
    {
        var itemType = typeof(TItem);
        var itemProps = itemType.GetProperties();

        for (var i = 0; i < CascadingContext.Grid.Columns.Count; i++)
        {
            if (item is not null)
            {
                var column = CascadingContext.Grid.Columns[i];

                if (column is { Actions: { } actions })
                {
                    yield return new GridCellActionContext<TItem>(item, actions.Items);
                }

                var property = itemProps.ElementAtOrDefault(i);

                if (property is not null)
                {
                    yield return new GridCellDataContext<TItem>(item, property);
                }
            }
            else
            {
                yield return null;
            }
        }
    }
}