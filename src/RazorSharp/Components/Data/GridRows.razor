@inherits GridComponentBase<TItem>
@using Microsoft.AspNetCore.Components.Web.Virtualization
@typeparam TItem

<tbody>
    <CascadingValue Name="Rows" Value="@(this)" IsFixed="true">
        @if (CascadingContext.Grid is {Items: not null} grid)
        {
            if (grid.Registry.TryGetComponent<GridRowsVirtualizeOptions<TItem>>(out var virtualizer))
            {
                <Virtualize @ref="@_virtualizeComponent" Context="item"
                            ItemsProvider="@GetVirtualizedItems"
                            ItemSize="@virtualizer.ItemSize"
                            OverscanCount="@virtualizer.OverscanCount"
                            SpacerElement="@virtualizer.SpacerElement">
                    @RenderGridRow(item)
                </Virtualize>
            }
            else
            {
                foreach (var item in _currentNonVirtualizedViewItems)
                {
                    @RenderGridRow(item)
                }
            }
        }
        @if (ChildContent is not null)
        {
            @ChildContent
        }
    </CascadingValue>
</tbody>

@code {

    private IEnumerable<object?> EnumerateCells(TItem? item)
    {
        var itemType = typeof(TItem);
        var itemProps = itemType.GetProperties();

        for (var i = 0; i < CascadingContext.Grid.Columns.Count; i++)
        {
            if (item is not null)
            {
                var column = CascadingContext.Grid.Columns[i];

                if (column is { Actions: { } actions })
                {
                    yield return new GridCellActionContext<TItem>(column, item, actions.Items);
                }

                var property = itemProps.ElementAtOrDefault(i);

                if (property is not null)
                {
                    yield return new GridCellDataContext<TItem>(column, item, property);
                }
            }
            else
            {
                yield return null;
            }
        }
    }

    private RenderFragment RenderGridRow(TItem? item)
        => RowTemplate is not null
            ? RowTemplate(new(item, EnumerateCells(item)))
            : RenderDynamicGridRow(item);

    private RenderFragment RenderDynamicGridRow(TItem? item)
    {
        GridRow<TItem>? gridRow = null!;

        return @<GridRow TItem="TItem" @ref="gridRow" @key="item">
                   @* ReSharper disable once ConvertIfStatementToSwitchStatement *@
                   @{
                       foreach (var context in EnumerateCells(item))
                       {
                           if (context is GridCellActionContext<TItem> { Actions: { } actions })
                           {
                               <GridCell TItem="TItem" Context="context">
                                   @if (gridRow is not null)
                                   {
                                       foreach (var action in actions.Where(x => x.EditState == gridRow.EditState))
                                       {
                                           <DynamicComponent Type="action.GetType()" Parameters="@action.Parameters" />
                                       }
                                   }
                               </GridCell>
                           }
                           else if (context is GridCellDataContext<TItem> { OriginalValue: { } content })
                           {
                               <GridCell TItem="TItem" Context="context">
                                   @content
                               </GridCell>
                           }
                           else
                           {
                               <GridCell TItem="TItem" Context="context">
                                   &nbsp;
                               </GridCell>
                           }
                       }
                   }
               </GridRow>;
    }

}