@inherits GridComponentBase<TItem>
@using RazorSharp.Components.Forms
@typeparam TItem

@* REVISIT: This is temporarily and will be completely revisited in the future with much better code and more features. *@

<CascadingValue Name="Cell" Value="@(this)" IsFixed="true">
    <td>
        @if (Context is GridCellDataContext<TItem> context && CascadingContext.Row is { EditState: GridEditState.Write })
        {
            switch (context.OriginalValue)
            {
                case string s:
                {
                    <WebInput TValue="string" Value="s" OnInput="@OnChangeHandlerAsync" />
                    break;
                }
                case int @int:
                {
                    <WebInput TValue="int" Value="@(@int)" OnInput="@OnChangeHandlerAsync" />
                    break;
                }
                case bool @bool:
                {
                    <input type="checkbox" checked="@(@bool)" @onchange="OnChangeHandlerAsync" />
                    break;
                }
                case float @float:
                {
                    <WebInput TValue="float" Value="@(@float)" OnInput="@OnChangeHandlerAsync" />
                    break;
                }
                case double @double:
                {
                    <WebInput TValue="double" Value="@(@double)" OnInput="@OnChangeHandlerAsync" />
                    break;
                }
                case char @char:
                {
                    <WebInput TValue="char" Value="@(@char)" OnInput="@OnChangeHandlerAsync" />
                    break;
                }
                case byte @byte:
                {
                    <WebInput TValue="byte" Value="@(@byte)" OnInput="@OnChangeHandlerAsync" />
                    break;
                }
                case long @long:
                {
                    <WebInput TValue="long" Value="@(@long)" OnInput="@OnChangeHandlerAsync" />
                    break;
                }
                case short @short:
                {
                    <WebInput TValue="short" Value="@(@short)" OnInput="@OnChangeHandlerAsync" />
                    break;
                }
                default:
                {
                    @ChildContent

                    break;
                }
            }
        }
        else
        {
            @ChildContent
        }
    </td>
</CascadingValue>

@code {

    private void OnChangeHandlerAsync(ChangeEventArgs args)
    {
        if (CascadingContext.Row is { } row && Context is GridCellDataContext<TItem> context)
        {
            row.Edit(context, args.Value);
        }
    }

}